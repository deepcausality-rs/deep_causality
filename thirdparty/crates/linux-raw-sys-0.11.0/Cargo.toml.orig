[package]
name = "linux-raw-sys"
version = "0.11.0"
authors = ["Dan Gohman <dev@sunfishcode.online>"]
description = "Generated bindings for Linux's userspace API"
documentation = "https://docs.rs/linux-raw-sys"
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/sunfishcode/linux-raw-sys"
edition = "2021"
keywords = ["linux", "uapi", "ffi"]
categories = ["external-ffi-bindings"]
exclude = ["/gen", "/.*"]
rust-version = "1.63"

[dependencies]
core = { version = "1.0.0", optional = true, package = "rustc-std-workspace-core" }

[dev-dependencies]
static_assertions = "1.1.0"
libc = "0.2.100"

[package.metadata.docs.rs]
features = ["default", "bootparam", "btrfs", "elf_uapi", "image", "ioctl", "landlock", "netlink", "io_uring", "if_arp", "if_ether", "if_packet", "net", "ptrace", "prctl", "elf", "xdp", "mempolicy", "system", "loop_device"]
targets = ["x86_64-unknown-linux-gnu", "i686-unknown-linux-gnu"]

[lints.rust.unexpected_cfgs]
level = "warn"
check-cfg = [
    'cfg(target_arch, values("xtensa"))',
]

# The rest of this file is auto-generated!
[features]
auxvec = []
bootparam = []
btrfs = []
elf_uapi = []
errno = []
general = []
if_arp = []
if_ether = []
if_packet = []
image = []
io_uring = []
ioctl = []
landlock = []
loop_device = []
mempolicy = []
net = []
netlink = []
prctl = []
ptrace = []
system = []
xdp = []
default = ["std", "general", "errno"]
std = []
no_std = []
elf = []
rustc-dep-of-std = ["core", "no_std"]
